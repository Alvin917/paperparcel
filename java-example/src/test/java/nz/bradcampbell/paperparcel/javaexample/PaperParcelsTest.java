package nz.bradcampbell.paperparcel.javaexample;

import android.os.Parcel;
import android.os.Parcelable;
import java.util.Date;
import nz.bradcampbell.paperparcel.PaperParcels;
import nz.bradcampbell.paperparcel.TypedParcelable;
import org.junit.Test;

import static com.google.common.truth.Truth.assertThat;

public final class PaperParcelsTest {
  @Test public void wrapToConcreteType() throws Exception {
    State originalObj = new State(1, new Date(), "taco");
    StateParcel stateParcel = PaperParcels.wrap(originalObj);
    State unwrapped = PaperParcels.unwrap(stateParcel);
    assertThat(originalObj).isEqualTo(unwrapped);

    State unsafeUnwrapped = PaperParcels.unsafeUnwrap(stateParcel);
    assertThat(originalObj).isEqualTo(unsafeUnwrapped);
  }

  @Test public void wrapToGenericType() throws Exception {
    State originalObj = new State(1, new Date(), "taco");
    TypedParcelable<State> stateParcel = PaperParcels.wrap(originalObj);
    State unwrapped = PaperParcels.unwrap(stateParcel);
    assertThat(originalObj).isEqualTo(unwrapped);

    State unsafeUnwrapped = PaperParcels.unsafeUnwrap(stateParcel);
    assertThat(originalObj).isEqualTo(unsafeUnwrapped);
  }

  @Test public void wrapToRawParcelable() throws Exception {
    State originalObj = new State(1, new Date(), "taco");
    //noinspection unchecked
    Parcelable stateParcel = PaperParcels.wrap(originalObj);
    //noinspection unchecked
    State unwrapped = PaperParcels.unwrap((TypedParcelable<State>) stateParcel);
    assertThat(originalObj).isEqualTo(unwrapped);

    State unsafeUnwrapped = PaperParcels.unsafeUnwrap(stateParcel);
    assertThat(originalObj).isEqualTo(unsafeUnwrapped);
  }

  @Test public void wrapUnparcelableType() throws Exception {
    try {
      PaperParcels.wrap("foo");
    } catch (Throwable e) {
      assertThat(e).hasMessage("Unable to find PaperParcel for type 'String', did you forget to annotate it with @PaperParcel?");
    }
  }

  @Test public void unwrapNonPaperParcelableType() throws Exception {
    try {
      PaperParcels.unsafeUnwrap(new NonPaperParcelable("taco"));
    } catch (Throwable e) {
      assertThat(e).hasMessage("Unable to cast 'NonPaperParcelable' to TypedParcelable, are you sure this Parcelable was generated by @PaperParcel?");
    }
  }

  @Test public void unwrapNonGeneratedTypedParcelable() throws Exception {
    try {
      PaperParcels.unwrap(new NonGeneratedTypedParcelable(new Taco("taco")));
    } catch (Throwable e) {
      assertThat(e).hasMessage("Unable to find PaperParcel for parcel type 'NonGeneratedTypedParcelable'...did you manually implement TypedParcelable instead of using @PaperParcel?");
    }
  }

  private static class NonGeneratedTypedParcelable implements TypedParcelable<Taco> {
    public static final Parcelable.Creator<Taco> CREATOR = new Parcelable.Creator<Taco>() {
      @Override public Taco createFromParcel(Parcel in) {
        return new Taco(in);
      }
      @Override public Taco[] newArray(int size) {
        return new Taco[size];
      }
    };
    private final Taco taco;

    public NonGeneratedTypedParcelable(Taco taco) {
      this.taco = taco;
    }

    @Override public int describeContents() {
      return 0;
    }

    @Override public void writeToParcel(Parcel dest, int flags) {
      dest.writeString(taco.taco);
    }
  }

  private static class Taco {
    private final String taco;

    private Taco(String taco) {
      this.taco = taco;
    }

    public Taco(Parcel in) {
      taco = in.readString();
    }
  }

  private static class NonPaperParcelable implements Parcelable {
    public static final Parcelable.Creator<NonPaperParcelable> CREATOR = new Parcelable.Creator<NonPaperParcelable>() {
      @Override public NonPaperParcelable createFromParcel(Parcel in) {
        return new NonPaperParcelable(in);
      }
      @Override public NonPaperParcelable[] newArray(int size) {
        return new NonPaperParcelable[size];
      }
    };


    private final String taco;

    public NonPaperParcelable(String taco) {
      this.taco = taco;
    }

    private NonPaperParcelable(Parcel parcel) {
      taco = parcel.readString();
    }

    @Override public int describeContents() {
      return 0;
    }

    @Override public void writeToParcel(Parcel dest, int flags) {
      dest.writeString(taco);
    }
  }
}
