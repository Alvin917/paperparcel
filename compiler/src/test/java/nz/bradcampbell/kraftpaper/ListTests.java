package nz.bradcampbell.kraftpaper;

import com.google.common.base.Joiner;
import com.google.testing.compile.JavaFileObjects;
import org.junit.Test;

import javax.tools.JavaFileObject;

import static com.google.common.truth.Truth.assertAbout;
import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
import static java.util.Arrays.asList;

public class ListTests {

  @Test public void nullableListOfParcelableTypesTest() throws Exception {
    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
        "package test;",
        "import org.jetbrains.annotations.Nullable;",
        "import nz.bradcampbell.kraftpaper.KraftPaper;",
        "import java.util.List;",
        "@KraftPaper",
        "public final class Test {",
        "@Nullable private final List<Integer> testList;",
        "public Test(@Nullable List<Integer> testList) {",
        "this.testList = testList;",
        "}",
        "@Nullable public List<Integer> component1() {",
        "return this.testList;",
        "}",
        "}"
    ));

    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/TestParcel", Joiner.on('\n').join(
        "package test;",
        "import android.os.Parcel;",
        "import android.os.Parcelable;",
        "import java.lang.Integer;",
        "import java.lang.Override;",
        "import java.util.ArrayList;",
        "import java.util.List;",
        "public class TestParcel implements Parcelable {",
        "public static final Parcelable.Creator<TestParcel> CREATOR = new Parcelable.Creator<TestParcel>() {",
        "@Override public TestParcel createFromParcel(Parcel in) {",
        "return new TestParcel(in);",
        "}",
        "@Override public TestParcel[] newArray(int size) {",
        "return new TestParcel[size];",
        "}",
        "};",
        "private final Test data;",
        "private TestParcel(Test data) {",
        "this.data = data;",
        "}",
        "private TestParcel(Parcel in) {",
        "List<Integer> outComponent1 = null;",
        "if (in.readInt() == 0) {",
        "int component1Size = in.readInt();",
        "List<Integer> component1 = new ArrayList<Integer>(component1Size);",
        "for (int component1Index = 0; component1Index < component1Size; component1Index++) {",
        "Integer component1Item = (Integer) in.readValue(null);",
        "component1.add(component1Item);",
        "}",
        "outComponent1 = component1;",
        "}",
        "this.data = new Test(outComponent1);",
        "}",
        "public static final TestParcel wrap(Test data) {",
        "return new TestParcel(data);",
        "}",
        "public Test getContents() {",
        "return data;",
        "}",
        "@Override public int describeContents() {",
        "return 0;",
        "}",
        "@Override public void writeToParcel(Parcel dest, int flags) {",
        "List<Integer> component1 = data.component1();",
        "if (component1 == null) {",
        "dest.writeInt(1);",
        "} else {",
        "dest.writeInt(0);",
        "int component1Size = component1.size();",
        "dest.writeInt(component1Size);",
        "for (int component1Index = 0; component1Index < component1Size; component1Index++) {",
        "Integer component1Item = component1.get(component1Index);",
        "dest.writeValue(component1Item);",
        "}",
        "}",
        "}",
        "}"
    ));

    assertAbout(javaSource()).that(source)
        .processedWith(new KraftPaperProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(expectedSource);
  }

  @Test public void nullableListOfNonParcelableTypesTest() throws Exception {
    JavaFileObject dataClassRoot = JavaFileObjects.forSourceString("test.Root", Joiner.on('\n').join(
        "package test;",
        "import org.jetbrains.annotations.Nullable;",
        "import nz.bradcampbell.kraftpaper.KraftPaper;",
        "import java.util.List;",
        "@KraftPaper",
        "public final class Root {",
        "@Nullable private final List<Child> child;",
        "public Root(@Nullable List<Child> child) {",
        "this.child = child;",
        "}",
        "@Nullable public List<Child> component1() {",
        "return this.child;",
        "}",
        "}"
    ));

    JavaFileObject dataClassChild = JavaFileObjects.forSourceString("test.Child", Joiner.on('\n').join(
        "package test;",
        "public final class Child {",
        "private final Integer test;",
        "public Child(Integer test) {",
        "this.test = test;",
        "}",
        "public Integer component1() {",
        "return this.test;",
        "}",
        "}"
    ));

    JavaFileObject rootParcel = JavaFileObjects.forSourceString("test/RootParcel", Joiner.on('\n').join(
        "package test;",
        "import android.os.Parcel;",
        "import android.os.Parcelable;",
        "import java.lang.Override;",
        "import java.util.ArrayList;",
        "import java.util.List;",
        "public class RootParcel implements Parcelable {",
        "public static final Parcelable.Creator<RootParcel> CREATOR = new Parcelable.Creator<RootParcel>() {",
        "@Override public RootParcel createFromParcel(Parcel in) {",
        "return new RootParcel(in);",
        "}",
        "@Override public RootParcel[] newArray(int size) {",
        "return new RootParcel[size];",
        "}",
        "};",
        "private final Root data;",
        "private RootParcel(Root data) {",
        "this.data = data;",
        "}",
        "private RootParcel(Parcel in) {",
        "List<Child> outComponent1 = null;",
        "if (in.readInt() == 0) {",
        "int component1Size = in.readInt();",
        "List<Child> component1 = new ArrayList<Child>(component1Size);",
        "for (int component1Index = 0; component1Index < component1Size; component1Index++) {",
        "Child outComponent1Item = null;",
        "if (in.readInt() == 0) {",
        "ChildParcel component1ItemParcel = ChildParcel.CREATOR.createFromParcel(in);",
        "outComponent1Item = component1ItemParcel.getContents();",
        "}",
        "component1.add(outComponent1Item);",
        "}",
        "outComponent1 = component1;",
        "}",
        "this.data = new Root(outComponent1);",
        "}",
        "public static final RootParcel wrap(Root data) {",
        "return new RootParcel(data);",
        "}",
        "public Root getContents() {",
        "return data;",
        "}",
        "@Override public int describeContents() {",
        "return 0;",
        "}",
        "@Override public void writeToParcel(Parcel dest, int flags) {",
        "List<Child> component1 = data.component1();",
        "if (component1 == null) {",
        "dest.writeInt(1);",
        "} else {",
        "dest.writeInt(0);",
        "int component1Size = component1.size();",
        "dest.writeInt(component1Size);",
        "for (int component1Index = 0; component1Index < component1Size; component1Index++) {",
        "Child component1Item = component1.get(component1Index);",
        "if (component1Item == null) {",
        "dest.writeInt(1);",
        "} else {",
        "dest.writeInt(0);",
        "ChildParcel component1ParamParcel = ChildParcel.wrap(component1Item);",
        "component1ParamParcel.writeToParcel(dest, 0);",
        "}",
        "}",
        "}",
        "}",
        "}"
    ));

    JavaFileObject childParcel = JavaFileObjects.forSourceString("test/ChildParcel", Joiner.on('\n').join(
        "package test;",
        "import android.os.Parcel;",
        "import android.os.Parcelable;",
        "import java.lang.Integer;",
        "import java.lang.Override;",
        "public class ChildParcel implements Parcelable {",
        "public static final Parcelable.Creator<ChildParcel> CREATOR = new Parcelable.Creator<ChildParcel>() {",
        "@Override public ChildParcel createFromParcel(Parcel in) {",
        "return new ChildParcel(in);",
        "}",
        "@Override public ChildParcel[] newArray(int size) {",
        "return new ChildParcel[size];",
        "}",
        "};",
        "private final Child data;",
        "private ChildParcel(Child data) {",
        "this.data = data;",
        "}",
        "private ChildParcel(Parcel in) {",
        "Integer component1 = (Integer) in.readValue(null);",
        "this.data = new Child(component1);",
        "}",
        "public static final ChildParcel wrap(Child data) {",
        "return new ChildParcel(data);",
        "}",
        "public Child getContents() {",
        "return data;",
        "}",
        "@Override public int describeContents() {",
        "return 0;",
        "}",
        "@Override public void writeToParcel(Parcel dest, int flags) {",
        "Integer component1 = data.component1();",
        "dest.writeValue(component1);",
        "}",
        "}"
    ));

    assertAbout(javaSources()).that(asList(dataClassRoot, dataClassChild))
        .processedWith(new KraftPaperProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(rootParcel, childParcel);
  }

  @Test public void listOfParcelableTypesTest() throws Exception {
    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
        "package test;",
        "import nz.bradcampbell.kraftpaper.KraftPaper;",
        "import java.util.List;",
        "@KraftPaper",
        "public final class Test {",
        "private final List<Integer> testList;",
        "public Test(List<Integer> testList) {",
        "this.testList = testList;",
        "}",
        "public List<Integer> component1() {",
        "return this.testList;",
        "}",
        "}"
    ));

    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/TestParcel", Joiner.on('\n').join(
        "package test;",
        "import android.os.Parcel;",
        "import android.os.Parcelable;",
        "import java.lang.Integer;",
        "import java.lang.Override;",
        "import java.util.ArrayList;",
        "import java.util.List;",
        "public class TestParcel implements Parcelable {",
        "public static final Parcelable.Creator<TestParcel> CREATOR = new Parcelable.Creator<TestParcel>() {",
        "@Override public TestParcel createFromParcel(Parcel in) {",
        "return new TestParcel(in);",
        "}",
        "@Override public TestParcel[] newArray(int size) {",
        "return new TestParcel[size];",
        "}",
        "};",
        "private final Test data;",
        "private TestParcel(Test data) {",
        "this.data = data;",
        "}",
        "private TestParcel(Parcel in) {",
        "int component1Size = in.readInt();",
        "List<Integer> component1 = new ArrayList<Integer>(component1Size);",
        "for (int component1Index = 0; component1Index < component1Size; component1Index++) {",
        "Integer component1Item = (Integer) in.readValue(null);",
        "component1.add(component1Item);",
        "}",
        "this.data = new Test(component1);",
        "}",
        "public static final TestParcel wrap(Test data) {",
        "return new TestParcel(data);",
        "}",
        "public Test getContents() {",
        "return data;",
        "}",
        "@Override public int describeContents() {",
        "return 0;",
        "}",
        "@Override public void writeToParcel(Parcel dest, int flags) {",
        "List<Integer> component1 = data.component1();",
        "int component1Size = component1.size();",
        "dest.writeInt(component1Size);",
        "for (int component1Index = 0; component1Index < component1Size; component1Index++) {",
        "Integer component1Item = component1.get(component1Index);",
        "dest.writeValue(component1Item);",
        "}",
        "}",
        "}"
    ));

    assertAbout(javaSource()).that(source)
        .processedWith(new KraftPaperProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(expectedSource);
  }

  @Test public void listOfDataTypesTest() throws Exception {
    JavaFileObject dataClassRoot = JavaFileObjects.forSourceString("test.Root", Joiner.on('\n').join(
        "package test;",
        "import nz.bradcampbell.kraftpaper.KraftPaper;",
        "import java.util.List;",
        "@KraftPaper",
        "public final class Root {",
        "private final List<Child> child;",
        "public Root(List<Child> child) {",
        "this.child = child;",
        "}",
        "public List<Child> component1() {",
        "return this.child;",
        "}",
        "}"
    ));

    JavaFileObject dataClassChild = JavaFileObjects.forSourceString("test.Child", Joiner.on('\n').join(
        "package test;",
        "public final class Child {",
        "private final Integer test;",
        "public Child(Integer test) {",
        "this.test = test;",
        "}",
        "public Integer component1() {",
        "return this.test;",
        "}",
        "}"
    ));

    JavaFileObject rootParcel = JavaFileObjects.forSourceString("test/RootParcel", Joiner.on('\n').join(
        "package test;",
        "import android.os.Parcel;",
        "import android.os.Parcelable;",
        "import java.lang.Override;",
        "import java.util.ArrayList;",
        "import java.util.List;",
        "public class RootParcel implements Parcelable {",
        "public static final Parcelable.Creator<RootParcel> CREATOR = new Parcelable.Creator<RootParcel>() {",
        "@Override public RootParcel createFromParcel(Parcel in) {",
        "return new RootParcel(in);",
        "}",
        "@Override public RootParcel[] newArray(int size) {",
        "return new RootParcel[size];",
        "}",
        "};",
        "private final Root data;",
        "private RootParcel(Root data) {",
        "this.data = data;",
        "}",
        "private RootParcel(Parcel in) {",
        "int component1Size = in.readInt();",
        "List<Child> component1 = new ArrayList<Child>(component1Size);",
        "for (int component1Index = 0; component1Index < component1Size; component1Index++) {",
        "Child outComponent1Item = null;",
        "if (in.readInt() == 0) {",
        "ChildParcel component1ItemParcel = ChildParcel.CREATOR.createFromParcel(in);",
        "outComponent1Item = component1ItemParcel.getContents();",
        "}",
        "component1.add(outComponent1Item);",
        "}",
        "this.data = new Root(component1);",
        "}",
        "public static final RootParcel wrap(Root data) {",
        "return new RootParcel(data);",
        "}",
        "public Root getContents() {",
        "return data;",
        "}",
        "@Override public int describeContents() {",
        "return 0;",
        "}",
        "@Override public void writeToParcel(Parcel dest, int flags) {",
        "List<Child> component1 = data.component1();",
        "int component1Size = component1.size();",
        "dest.writeInt(component1Size);",
        "for (int component1Index = 0; component1Index < component1Size; component1Index++) {",
        "Child component1Item = component1.get(component1Index);",
        "if (component1Item == null) {",
        "dest.writeInt(1);",
        "} else {",
        "dest.writeInt(0);",
        "ChildParcel component1ParamParcel = ChildParcel.wrap(component1Item);",
        "component1ParamParcel.writeToParcel(dest, 0);",
        "}",
        "}",
        "}",
        "}"
    ));

    JavaFileObject childParcel = JavaFileObjects.forSourceString("test/ChildParcel", Joiner.on('\n').join(
        "package test;",
        "import android.os.Parcel;",
        "import android.os.Parcelable;",
        "import java.lang.Integer;",
        "import java.lang.Override;",
        "public class ChildParcel implements Parcelable {",
        "public static final Parcelable.Creator<ChildParcel> CREATOR = new Parcelable.Creator<ChildParcel>() {",
        "@Override public ChildParcel createFromParcel(Parcel in) {",
        "return new ChildParcel(in);",
        "}",
        "@Override public ChildParcel[] newArray(int size) {",
        "return new ChildParcel[size];",
        "}",
        "};",
        "private final Child data;",
        "private ChildParcel(Child data) {",
        "this.data = data;",
        "}",
        "private ChildParcel(Parcel in) {",
        "Integer component1 = (Integer) in.readValue(null);",
        "this.data = new Child(component1);",
        "}",
        "public static final ChildParcel wrap(Child data) {",
        "return new ChildParcel(data);",
        "}",
        "public Child getContents() {",
        "return data;",
        "}",
        "@Override public int describeContents() {",
        "return 0;",
        "}",
        "@Override public void writeToParcel(Parcel dest, int flags) {",
        "Integer component1 = data.component1();",
        "dest.writeValue(component1);",
        "}",
        "}"
    ));

    assertAbout(javaSources()).that(asList(dataClassRoot, dataClassChild))
        .processedWith(new KraftPaperProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(rootParcel, childParcel);
  }

  @Test public void listOfListOfDataTypesTest() throws Exception {
    JavaFileObject dataClassRoot = JavaFileObjects.forSourceString("test.Root", Joiner.on('\n').join(
        "package test;",
        "import nz.bradcampbell.kraftpaper.KraftPaper;",
        "import java.util.List;",
        "@KraftPaper",
        "public final class Root {",
        "private final List<List<Child>> child;",
        "public Root(List<List<Child>> child) {",
        "this.child = child;",
        "}",
        "public List<List<Child>> component1() {",
        "return this.child;",
        "}",
        "}"
    ));

    JavaFileObject dataClassChild = JavaFileObjects.forSourceString("test.Child", Joiner.on('\n').join(
        "package test;",
        "public final class Child {",
        "private final Integer test;",
        "public Child(Integer test) {",
        "this.test = test;",
        "}",
        "public Integer component1() {",
        "return this.test;",
        "}",
        "}"
    ));

    JavaFileObject rootParcel = JavaFileObjects.forSourceString("test/RootParcel", Joiner.on('\n').join(
        "package test;",
        "import android.os.Parcel;",
        "import android.os.Parcelable;",
        "import java.lang.Override;",
        "import java.util.ArrayList;",
        "import java.util.List;",
        "public class RootParcel implements Parcelable {",
        "public static final Parcelable.Creator<RootParcel> CREATOR = new Parcelable.Creator<RootParcel>() {",
        "@Override public RootParcel createFromParcel(Parcel in) {",
        "return new RootParcel(in);",
        "}",
        "@Override public RootParcel[] newArray(int size) {",
        "return new RootParcel[size];",
        "}",
        "};",
        "private final Root data;",
        "private RootParcel(Root data) {",
        "this.data = data;",
        "}",
        "private RootParcel(Parcel in) {",
        "int component1Size = in.readInt();",
        "List<List<Child>> component1 = new ArrayList<List<Child>>(component1Size);",
        "for (int component1Index = 0; component1Index < component1Size; component1Index++) {",
        "List<Child> outComponent1Item = null;",
        "if (in.readInt() == 0) {",
        "int component1ItemSize = in.readInt();",
        "List<Child> component1Item = new ArrayList<Child>(component1ItemSize);",
        "for (int component1ItemIndex = 0; component1ItemIndex < component1ItemSize; component1ItemIndex++) {",
        "Child outComponent1ItemItem = null;",
        "if (in.readInt() == 0) {",
        "ChildParcel component1ItemItemParcel = ChildParcel.CREATOR.createFromParcel(in);",
        "outComponent1ItemItem = component1ItemItemParcel.getContents();",
        "}",
        "component1Item.add(outComponent1ItemItem);",
        "}",
        "outComponent1Item = component1Item;",
        "}",
        "component1.add(outComponent1Item);",
        "}",
        "this.data = new Root(component1);",
        "}",
        "public static final RootParcel wrap(Root data) {",
        "return new RootParcel(data);",
        "}",
        "public Root getContents() {",
        "return data;",
        "}",
        "@Override public int describeContents() {",
        "return 0;",
        "}",
        "@Override public void writeToParcel(Parcel dest, int flags) {",
        "List<List<Child>> component1 = data.component1();",
        "int component1Size = component1.size();",
        "dest.writeInt(component1Size);",
        "for (int component1Index = 0; component1Index < component1Size; component1Index++) {",
        "List<Child> component1Item = component1.get(component1Index);",
        "if (component1Item == null) {",
        "dest.writeInt(1);",
        "} else {",
        "dest.writeInt(0);",
        "int component1ParamSize = component1Item.size();",
        "dest.writeInt(component1ParamSize);",
        "for (int component1ParamIndex = 0; component1ParamIndex < component1ParamSize; component1ParamIndex++) {",
        "Child component1ParamItem = component1Item.get(component1ParamIndex);",
        "if (component1ParamItem == null) {",
        "dest.writeInt(1);",
        "} else {",
        "dest.writeInt(0);",
        "ChildParcel component1ParamParamParcel = ChildParcel.wrap(component1ParamItem);",
        "component1ParamParamParcel.writeToParcel(dest, 0);",
        "}",
        "}",
        "}",
        "}",
        "}",
        "}"
    ));

    JavaFileObject childParcel = JavaFileObjects.forSourceString("test/ChildParcel", Joiner.on('\n').join(
        "package test;",
        "import android.os.Parcel;",
        "import android.os.Parcelable;",
        "import java.lang.Integer;",
        "import java.lang.Override;",
        "public class ChildParcel implements Parcelable {",
        "public static final Parcelable.Creator<ChildParcel> CREATOR = new Parcelable.Creator<ChildParcel>() {",
        "@Override public ChildParcel createFromParcel(Parcel in) {",
        "return new ChildParcel(in);",
        "}",
        "@Override public ChildParcel[] newArray(int size) {",
        "return new ChildParcel[size];",
        "}",
        "};",
        "private final Child data;",
        "private ChildParcel(Child data) {",
        "this.data = data;",
        "}",
        "private ChildParcel(Parcel in) {",
        "Integer component1 = (Integer) in.readValue(null);",
        "this.data = new Child(component1);",
        "}",
        "public static final ChildParcel wrap(Child data) {",
        "return new ChildParcel(data);",
        "}",
        "public Child getContents() {",
        "return data;",
        "}",
        "@Override public int describeContents() {",
        "return 0;",
        "}",
        "@Override public void writeToParcel(Parcel dest, int flags) {",
        "Integer component1 = data.component1();",
        "dest.writeValue(component1);",
        "}",
        "}"
    ));

    assertAbout(javaSources()).that(asList(dataClassRoot, dataClassChild))
        .processedWith(new KraftPaperProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(rootParcel, childParcel);
  }

  @Test public void listOfListOfBundlesTest() throws Exception {
    JavaFileObject dataClass = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
        "package test;",
        "import nz.bradcampbell.kraftpaper.KraftPaper;",
        "import android.os.Bundle;",
        "import java.util.List;",
        "@KraftPaper",
        "public final class Test {",
        "private final List<List<Bundle>> child;",
        "public Test(List<List<Bundle>> child) {",
        "this.child = child;",
        "}",
        "public List<List<Bundle>> component1() {",
        "return this.child;",
        "}",
        "}"
    ));

    JavaFileObject parcel = JavaFileObjects.forSourceString("test/TestParcel", Joiner.on('\n').join(
        "package test;",
        "import android.os.Bundle;",
        "import android.os.Parcel;",
        "import android.os.Parcelable;",
        "import java.lang.ClassLoader;",
        "import java.lang.Override;",
        "import java.util.ArrayList;",
        "import java.util.List;",
        "public class TestParcel implements Parcelable {",
        "private static final ClassLoader CLASS_LOADER = Test.class.getClassLoader();",
        "public static final Parcelable.Creator<TestParcel> CREATOR = new Parcelable.Creator<TestParcel>() {",
        "@Override public TestParcel createFromParcel(Parcel in) {",
        "return new TestParcel(in);",
        "}",
        "@Override public TestParcel[] newArray(int size) {",
        "return new TestParcel[size];",
        "}",
        "};",
        "private final Test data;",
        "private TestParcel(Test data) {",
        "this.data = data;",
        "}",
        "private TestParcel(Parcel in) {",
        "int component1Size = in.readInt();",
        "List<List<Bundle>> component1 = new ArrayList<List<Bundle>>(component1Size);",
        "for (int component1Index = 0; component1Index < component1Size; component1Index++) {",
        "List<Bundle> outComponent1Item = null;",
        "if (in.readInt() == 0) {",
        "int component1ItemSize = in.readInt();",
        "List<Bundle> component1Item = new ArrayList<Bundle>(component1ItemSize);",
        "for (int component1ItemIndex = 0; component1ItemIndex < component1ItemSize; component1ItemIndex++) {",
        "Bundle outComponent1ItemItem = null;",
        "if (in.readInt() == 0) {",
        "outComponent1ItemItem = in.readBundle(CLASS_LOADER);",
        "}",
        "component1Item.add(outComponent1ItemItem);",
        "}",
        "outComponent1Item = component1Item;",
        "}",
        "component1.add(outComponent1Item);",
        "}",
        "this.data = new Test(component1);",
        "}",
        "public static final TestParcel wrap(Test data) {",
        "return new TestParcel(data);",
        "}",
        "public Test getContents() {",
        "return data;",
        "}",
        "@Override public int describeContents() {",
        "return 0;",
        "}",
        "@Override public void writeToParcel(Parcel dest, int flags) {",
        "List<List<Bundle>> component1 = data.component1();",
        "int component1Size = component1.size();",
        "dest.writeInt(component1Size);",
        "for (int component1Index = 0; component1Index < component1Size; component1Index++) {",
        "List<Bundle> component1Item = component1.get(component1Index);",
        "if (component1Item == null) {",
        "dest.writeInt(1);",
        "} else {",
        "dest.writeInt(0);",
        "int component1ParamSize = component1Item.size();",
        "dest.writeInt(component1ParamSize);",
        "for (int component1ParamIndex = 0; component1ParamIndex < component1ParamSize; component1ParamIndex++) {",
        "Bundle component1ParamItem = component1Item.get(component1ParamIndex);",
        "if (component1ParamItem == null) {",
        "dest.writeInt(1);",
        "} else {",
        "dest.writeInt(0);",
        "dest.writeBundle(component1ParamItem);",
        "}",
        "}",
        "}",
        "}",
        "}",
        "}"
    ));

    assertAbout(javaSource()).that(dataClass)
        .processedWith(new KraftPaperProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(parcel);
  }

  @Test public void listOfParcelableMapsTest() throws Exception {
    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
        "package test;",
        "import nz.bradcampbell.kraftpaper.KraftPaper;",
        "import java.util.List;",
        "import java.util.Map;",
        "@KraftPaper",
        "public final class Test {",
        "private final List<Map<Integer, Integer>> testList;",
        "public Test(List<Map<Integer, Integer>> testList) {",
        "this.testList = testList;",
        "}",
        "public List<Map<Integer, Integer>> component1() {",
        "return this.testList;",
        "}",
        "}"
    ));

    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/TestParcel", Joiner.on('\n').join(
        "package test;",
        "import android.os.Parcel;",
        "import android.os.Parcelable;",
        "import java.lang.Integer;",
        "import java.lang.Override;",
        "import java.util.ArrayList;",
        "import java.util.HashMap;",
        "import java.util.List;",
        "import java.util.Map;",
        "public class TestParcel implements Parcelable {",
        "public static final Parcelable.Creator<TestParcel> CREATOR = new Parcelable.Creator<TestParcel>() {",
        "@Override public TestParcel createFromParcel(Parcel in) {",
        "return new TestParcel(in);",
        "}",
        "@Override public TestParcel[] newArray(int size) {",
        "return new TestParcel[size];",
        "}",
        "};",
        "private final Test data;",
        "private TestParcel(Test data) {",
        "this.data = data;",
        "}",
        "private TestParcel(Parcel in) {",
        "int component1Size = in.readInt();",
        "List<Map<Integer, Integer>> component1 = new ArrayList<Map<Integer, Integer>>(component1Size);",
        "for (int component1Index = 0; component1Index < component1Size; component1Index++) {",
        "Map<Integer, Integer> outComponent1Item = null;",
        "if (in.readInt() == 0) {",
        "int component1ItemSize = in.readInt();",
        "Map<Integer, Integer> component1Item = new HashMap<Integer, Integer>(component1ItemSize);",
        "for (int component1ItemIndex = 0; component1ItemIndex < component1ItemSize; component1ItemIndex++) {",
        "Integer component1ItemKey = (Integer) in.readValue(null);",
        "Integer component1ItemValue = (Integer) in.readValue(null);",
        "component1Item.put(component1ItemKey, component1ItemValue);",
        "}",
        "outComponent1Item = component1Item;",
        "}",
        "component1.add(outComponent1Item);",
        "}",
        "this.data = new Test(component1);",
        "}",
        "public static final TestParcel wrap(Test data) {",
        "return new TestParcel(data);",
        "}",
        "public Test getContents() {",
        "return data;",
        "}",
        "@Override public int describeContents() {",
        "return 0;",
        "}",
        "@Override public void writeToParcel(Parcel dest, int flags) {",
        "List<Map<Integer, Integer>> component1 = data.component1();",
        "int component1Size = component1.size();",
        "dest.writeInt(component1Size);",
        "for (int component1Index = 0; component1Index < component1Size; component1Index++) {",
        "Map<Integer, Integer> component1Item = component1.get(component1Index);",
        "if (component1Item == null) {",
        "dest.writeInt(1);",
        "} else {",
        "dest.writeInt(0);",
        "dest.writeInt(component1Item.size());",
        "for (Map.Entry<Integer, Integer> component1ParamEntry : component1Item.entrySet()) {",
        "dest.writeValue(component1ParamEntry.getKey());",
        "dest.writeValue(component1ParamEntry.getValue());",
        "}",
        "}",
        "}",
        "}",
        "}"
    ));

    assertAbout(javaSource()).that(source)
        .processedWith(new KraftPaperProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(expectedSource);
  }

  @Test public void listOfNonParcelableMapsTest() throws Exception {
    JavaFileObject dataClassRoot = JavaFileObjects.forSourceString("test.Root", Joiner.on('\n').join(
        "package test;",
        "import nz.bradcampbell.kraftpaper.KraftPaper;",
        "import java.util.List;",
        "import java.util.Map;",
        "@KraftPaper",
        "public final class Root {",
        "private final List<Map<Integer, Child>> child;",
        "public Root(List<Map<Integer, Child>> child) {",
        "this.child = child;",
        "}",
        "public List<Map<Integer, Child>> component1() {",
        "return this.child;",
        "}",
        "}"
    ));

    JavaFileObject dataClassChild = JavaFileObjects.forSourceString("test.Child", Joiner.on('\n').join(
        "package test;",
        "public final class Child {",
        "private final Integer test;",
        "public Child(Integer test) {",
        "this.test = test;",
        "}",
        "public Integer component1() {",
        "return this.test;",
        "}",
        "}"
    ));

    JavaFileObject rootParcel = JavaFileObjects.forSourceString("test/RootParcel", Joiner.on('\n').join(
        "package test;",
        "import android.os.Parcel;",
        "import android.os.Parcelable;",
        "import java.lang.Integer;",
        "import java.lang.Override;",
        "import java.util.ArrayList;",
        "import java.util.HashMap;",
        "import java.util.List;",
        "import java.util.Map;",
        "public class RootParcel implements Parcelable {",
        "public static final Parcelable.Creator<RootParcel> CREATOR = new Parcelable.Creator<RootParcel>() {",
        "@Override public RootParcel createFromParcel(Parcel in) {",
        "return new RootParcel(in);",
        "}",
        "@Override public RootParcel[] newArray(int size) {",
        "return new RootParcel[size];",
        "}",
        "};",
        "private final Root data;",
        "private RootParcel(Root data) {",
        "this.data = data;",
        "}",
        "private RootParcel(Parcel in) {",
        "int component1Size = in.readInt();",
        "List<Map<Integer, Child>> component1 = new ArrayList<Map<Integer, Child>>(component1Size);",
        "for (int component1Index = 0; component1Index < component1Size; component1Index++) {",
        "Map<Integer, Child> outComponent1Item = null;",
        "if (in.readInt() == 0) {",
        "int component1ItemSize = in.readInt();",
        "Map<Integer, Child> component1Item = new HashMap<Integer, Child>(component1ItemSize);",
        "for (int component1ItemIndex = 0; component1ItemIndex < component1ItemSize; component1ItemIndex++) {",
        "Integer component1ItemKey = (Integer) in.readValue(null);",
        "Child outComponent1ItemValue = null;",
        "if (in.readInt() == 0) {",
        "ChildParcel component1ItemValueParcel = ChildParcel.CREATOR.createFromParcel(in);",
        "outComponent1ItemValue = component1ItemValueParcel.getContents();",
        "}",
        "component1Item.put(component1ItemKey, outComponent1ItemValue);",
        "}",
        "outComponent1Item = component1Item;",
        "}",
        "component1.add(outComponent1Item);",
        "}",
        "this.data = new Root(component1);",
        "}",
        "public static final RootParcel wrap(Root data) {",
        "return new RootParcel(data);",
        "}",
        "public Root getContents() {",
        "return data;",
        "}",
        "@Override public int describeContents() {",
        "return 0;",
        "}",
        "@Override public void writeToParcel(Parcel dest, int flags) {",
        "List<Map<Integer, Child>> component1 = data.component1();",
        "int component1Size = component1.size();",
        "dest.writeInt(component1Size);",
        "for (int component1Index = 0; component1Index < component1Size; component1Index++) {",
        "Map<Integer, Child> component1Item = component1.get(component1Index);",
        "if (component1Item == null) {",
        "dest.writeInt(1);",
        "} else {",
        "dest.writeInt(0);",
        "dest.writeInt(component1Item.size());",
        "for (Map.Entry<Integer, Child> component1ParamEntry : component1Item.entrySet()) {",
        "dest.writeValue(component1ParamEntry.getKey());",
        "if (component1ParamEntry.getValue() == null) {",
        "dest.writeInt(1);",
        "} else {",
        "dest.writeInt(0);",
        "ChildParcel component1ParamValueParcel = ChildParcel.wrap(component1ParamEntry.getValue());",
        "component1ParamValueParcel.writeToParcel(dest, 0);",
        "}",
        "}",
        "}",
        "}",
        "}",
        "}"
    ));

    JavaFileObject childParcel = JavaFileObjects.forSourceString("test/ChildParcel", Joiner.on('\n').join(
        "package test;",
        "import android.os.Parcel;",
        "import android.os.Parcelable;",
        "import java.lang.Integer;",
        "import java.lang.Override;",
        "public class ChildParcel implements Parcelable {",
        "public static final Parcelable.Creator<ChildParcel> CREATOR = new Parcelable.Creator<ChildParcel>() {",
        "@Override public ChildParcel createFromParcel(Parcel in) {",
        "return new ChildParcel(in);",
        "}",
        "@Override public ChildParcel[] newArray(int size) {",
        "return new ChildParcel[size];",
        "}",
        "};",
        "private final Child data;",
        "private ChildParcel(Child data) {",
        "this.data = data;",
        "}",
        "private ChildParcel(Parcel in) {",
        "Integer component1 = (Integer) in.readValue(null);",
        "this.data = new Child(component1);",
        "}",
        "public static final ChildParcel wrap(Child data) {",
        "return new ChildParcel(data);",
        "}",
        "public Child getContents() {",
        "return data;",
        "}",
        "@Override public int describeContents() {",
        "return 0;",
        "}",
        "@Override public void writeToParcel(Parcel dest, int flags) {",
        "Integer component1 = data.component1();",
        "dest.writeValue(component1);",
        "}",
        "}"
    ));

    assertAbout(javaSources()).that(asList(dataClassRoot, dataClassChild))
        .processedWith(new KraftPaperProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(rootParcel, childParcel);
  }

  @Test public void listOfNonParcelableArraysTest() throws Exception {
    JavaFileObject dataClassRoot = JavaFileObjects.forSourceString("test.Root", Joiner.on('\n').join(
        "package test;",
        "import nz.bradcampbell.kraftpaper.KraftPaper;",
        "import java.util.List;",
        "@KraftPaper",
        "public final class Root {",
        "private final List<Child[]> child;",
        "public Root(List<Child[]> child) {",
        "this.child = child;",
        "}",
        "public List<Child[]> component1() {",
        "return this.child;",
        "}",
        "}"
    ));

    JavaFileObject dataClassChild = JavaFileObjects.forSourceString("test.Child", Joiner.on('\n').join(
        "package test;",
        "public final class Child {",
        "private final Integer test;",
        "public Child(Integer test) {",
        "this.test = test;",
        "}",
        "public Integer component1() {",
        "return this.test;",
        "}",
        "}"
    ));

    JavaFileObject rootParcel = JavaFileObjects.forSourceString("test/RootParcel", Joiner.on('\n').join(
        "package test;",
        "import android.os.Parcel;",
        "import android.os.Parcelable;",
        "import java.lang.Override;",
        "import java.util.ArrayList;",
        "import java.util.List;",
        "public class RootParcel implements Parcelable {",
        "public static final Parcelable.Creator<RootParcel> CREATOR = new Parcelable.Creator<RootParcel>() {",
        "@Override public RootParcel createFromParcel(Parcel in) {",
        "return new RootParcel(in);",
        "}",
        "@Override public RootParcel[] newArray(int size) {",
        "return new RootParcel[size];",
        "}",
        "};",
        "private final Root data;",
        "private RootParcel(Root data) {",
        "this.data = data;",
        "}",
        "private RootParcel(Parcel in) {",
        "int component1Size = in.readInt();",
        "List<Child[]> component1 = new ArrayList<Child[]>(component1Size);",
        "for (int component1Index = 0; component1Index < component1Size; component1Index++) {",
        "Child[] outComponent1Item = null;",
        "if (in.readInt() == 0) {",
        "int component1ItemSize = in.readInt();",
        "Child[] component1Item = new Child[component1ItemSize];",
        "for (int component1ItemIndex = 0; component1ItemIndex < component1ItemSize; component1ItemIndex++) {",
        "Child outComponent1ItemItem = null;",
        "if (in.readInt() == 0) {",
        "ChildParcel component1ItemItemParcel = ChildParcel.CREATOR.createFromParcel(in);",
        "outComponent1ItemItem = component1ItemItemParcel.getContents();",
        "}",
        "component1Item[component1ItemIndex] = outComponent1ItemItem;",
        "}",
        "outComponent1Item = component1Item;",
        "}",
        "component1.add(outComponent1Item);",
        "}",
        "this.data = new Root(component1);",
        "}",
        "public static final RootParcel wrap(Root data) {",
        "return new RootParcel(data);",
        "}",
        "public Root getContents() {",
        "return data;",
        "}",
        "@Override public int describeContents() {",
        "return 0;",
        "}",
        "@Override public void writeToParcel(Parcel dest, int flags) {",
        "List<Child[]> component1 = data.component1();",
        "int component1Size = component1.size();",
        "dest.writeInt(component1Size);",
        "for (int component1Index = 0; component1Index < component1Size; component1Index++) {",
        "Child[] component1Item = component1.get(component1Index);",
        "if (component1Item == null) {",
        "dest.writeInt(1);",
        "} else {",
        "dest.writeInt(0);",
        "int component1ParamSize = component1Item.length;",
        "dest.writeInt(component1ParamSize);",
        "for (int component1ParamIndex = 0; component1ParamIndex < component1ParamSize; component1ParamIndex++) {",
        "Child component1ParamItem = component1Item[component1ParamIndex];",
        "if (component1ParamItem == null) {",
        "dest.writeInt(1);",
        "} else {",
        "dest.writeInt(0);",
        "ChildParcel component1ParamComponentParcel = ChildParcel.wrap(component1ParamItem);",
        "component1ParamComponentParcel.writeToParcel(dest, 0);",
        "}",
        "}",
        "}",
        "}",
        "}",
        "}"
    ));

    JavaFileObject childParcel = JavaFileObjects.forSourceString("test/ChildParcel", Joiner.on('\n').join(
        "package test;",
        "import android.os.Parcel;",
        "import android.os.Parcelable;",
        "import java.lang.Integer;",
        "import java.lang.Override;",
        "public class ChildParcel implements Parcelable {",
        "public static final Parcelable.Creator<ChildParcel> CREATOR = new Parcelable.Creator<ChildParcel>() {",
        "@Override public ChildParcel createFromParcel(Parcel in) {",
        "return new ChildParcel(in);",
        "}",
        "@Override public ChildParcel[] newArray(int size) {",
        "return new ChildParcel[size];",
        "}",
        "};",
        "private final Child data;",
        "private ChildParcel(Child data) {",
        "this.data = data;",
        "}",
        "private ChildParcel(Parcel in) {",
        "Integer component1 = (Integer) in.readValue(null);",
        "this.data = new Child(component1);",
        "}",
        "public static final ChildParcel wrap(Child data) {",
        "return new ChildParcel(data);",
        "}",
        "public Child getContents() {",
        "return data;",
        "}",
        "@Override public int describeContents() {",
        "return 0;",
        "}",
        "@Override public void writeToParcel(Parcel dest, int flags) {",
        "Integer component1 = data.component1();",
        "dest.writeValue(component1);",
        "}",
        "}"
    ));

    assertAbout(javaSources()).that(asList(dataClassRoot, dataClassChild))
        .processedWith(new KraftPaperProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(rootParcel, childParcel);
  }

  @Test public void arrayListOfParcelableTypesTest() throws Exception {
    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
        "package test;",
        "import nz.bradcampbell.kraftpaper.KraftPaper;",
        "import java.util.ArrayList;",
        "@KraftPaper",
        "public final class Test {",
        "private final ArrayList<Integer> testList;",
        "public Test(ArrayList<Integer> testList) {",
        "this.testList = testList;",
        "}",
        "public ArrayList<Integer> component1() {",
        "return this.testList;",
        "}",
        "}"
    ));

    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/TestParcel", Joiner.on('\n').join(
        "package test;",
        "import android.os.Parcel;",
        "import android.os.Parcelable;",
        "import java.lang.Integer;",
        "import java.lang.Override;",
        "import java.util.ArrayList;",
        "public class TestParcel implements Parcelable {",
        "public static final Parcelable.Creator<TestParcel> CREATOR = new Parcelable.Creator<TestParcel>() {",
        "@Override public TestParcel createFromParcel(Parcel in) {",
        "return new TestParcel(in);",
        "}",
        "@Override public TestParcel[] newArray(int size) {",
        "return new TestParcel[size];",
        "}",
        "};",
        "private final Test data;",
        "private TestParcel(Test data) {",
        "this.data = data;",
        "}",
        "private TestParcel(Parcel in) {",
        "int component1Size = in.readInt();",
        "ArrayList<Integer> component1 = new ArrayList<Integer>();",
        "for (int component1Index = 0; component1Index < component1Size; component1Index++) {",
        "Integer component1Item = (Integer) in.readValue(null);",
        "component1.add(component1Item);",
        "}",
        "this.data = new Test(component1);",
        "}",
        "public static final TestParcel wrap(Test data) {",
        "return new TestParcel(data);",
        "}",
        "public Test getContents() {",
        "return data;",
        "}",
        "@Override public int describeContents() {",
        "return 0;",
        "}",
        "@Override public void writeToParcel(Parcel dest, int flags) {",
        "ArrayList<Integer> component1 = data.component1();",
        "int component1Size = component1.size();",
        "dest.writeInt(component1Size);",
        "for (int component1Index = 0; component1Index < component1Size; component1Index++) {",
        "Integer component1Item = component1.get(component1Index);",
        "dest.writeValue(component1Item);",
        "}",
        "}",
        "}"
    ));

    assertAbout(javaSource()).that(source)
        .processedWith(new KraftPaperProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(expectedSource);
  }

  @Test public void linkedListOfParcelableTypesTest() throws Exception {
    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
        "package test;",
        "import nz.bradcampbell.kraftpaper.KraftPaper;",
        "import java.util.LinkedList;",
        "@KraftPaper",
        "public final class Test {",
        "private final LinkedList<Integer> testList;",
        "public Test(LinkedList<Integer> testList) {",
        "this.testList = testList;",
        "}",
        "public LinkedList<Integer> component1() {",
        "return this.testList;",
        "}",
        "}"
    ));

    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/TestParcel", Joiner.on('\n').join(
        "package test;",
        "import android.os.Parcel;",
        "import android.os.Parcelable;",
        "import java.lang.Integer;",
        "import java.lang.Override;",
        "import java.util.LinkedList;",
        "public class TestParcel implements Parcelable {",
        "public static final Parcelable.Creator<TestParcel> CREATOR = new Parcelable.Creator<TestParcel>() {",
        "@Override public TestParcel createFromParcel(Parcel in) {",
        "return new TestParcel(in);",
        "}",
        "@Override public TestParcel[] newArray(int size) {",
        "return new TestParcel[size];",
        "}",
        "};",
        "private final Test data;",
        "private TestParcel(Test data) {",
        "this.data = data;",
        "}",
        "private TestParcel(Parcel in) {",
        "int component1Size = in.readInt();",
        "LinkedList<Integer> component1 = new LinkedList<Integer>();",
        "for (int component1Index = 0; component1Index < component1Size; component1Index++) {",
        "Integer component1Item = (Integer) in.readValue(null);",
        "component1.add(component1Item);",
        "}",
        "this.data = new Test(component1);",
        "}",
        "public static final TestParcel wrap(Test data) {",
        "return new TestParcel(data);",
        "}",
        "public Test getContents() {",
        "return data;",
        "}",
        "@Override public int describeContents() {",
        "return 0;",
        "}",
        "@Override public void writeToParcel(Parcel dest, int flags) {",
        "LinkedList<Integer> component1 = data.component1();",
        "int component1Size = component1.size();",
        "dest.writeInt(component1Size);",
        "for (int component1Index = 0; component1Index < component1Size; component1Index++) {",
        "Integer component1Item = component1.get(component1Index);",
        "dest.writeValue(component1Item);",
        "}",
        "}",
        "}"
    ));

    assertAbout(javaSource()).that(source)
        .processedWith(new KraftPaperProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(expectedSource);
  }

  @Test public void linkedListOfNonParcelableTypesTest() throws Exception {
    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
        "package test;",
        "import nz.bradcampbell.kraftpaper.KraftPaper;",
        "import java.util.LinkedList;",
        "@KraftPaper",
        "public final class Test {",
        "private final LinkedList<Child> testList;",
        "public Test(LinkedList<Child> testList) {",
        "this.testList = testList;",
        "}",
        "public LinkedList<Child> component1() {",
        "return this.testList;",
        "}",
        "}"
    ));

    JavaFileObject dataClassChild = JavaFileObjects.forSourceString("test.Child", Joiner.on('\n').join(
        "package test;",
        "public final class Child {",
        "private final Integer test;",
        "public Child(Integer test) {",
        "this.test = test;",
        "}",
        "public Integer component1() {",
        "return this.test;",
        "}",
        "}"
    ));

    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/TestParcel", Joiner.on('\n').join(
        "package test;",
        "import android.os.Parcel;",
        "import android.os.Parcelable;",
        "import java.lang.Override;",
        "import java.util.LinkedList;",
        "public class TestParcel implements Parcelable {",
        "public static final Parcelable.Creator<TestParcel> CREATOR = new Parcelable.Creator<TestParcel>() {",
        "@Override public TestParcel createFromParcel(Parcel in) {",
        "return new TestParcel(in);",
        "}",
        "@Override public TestParcel[] newArray(int size) {",
        "return new TestParcel[size];",
        "}",
        "};",
        "private final Test data;",
        "private TestParcel(Test data) {",
        "this.data = data;",
        "}",
        "private TestParcel(Parcel in) {",
        "int component1Size = in.readInt();",
        "LinkedList<Child> component1 = new LinkedList<Child>();",
        "for (int component1Index = 0; component1Index < component1Size; component1Index++) {",
        "Child outComponent1Item = null;",
        "if (in.readInt() == 0) {",
        "ChildParcel component1ItemParcel = ChildParcel.CREATOR.createFromParcel(in);",
        "outComponent1Item = component1ItemParcel.getContents();",
        "}",
        "component1.add(outComponent1Item);",
        "}",
        "this.data = new Test(component1);",
        "}",
        "public static final TestParcel wrap(Test data) {",
        "return new TestParcel(data);",
        "}",
        "public Test getContents() {",
        "return data;",
        "}",
        "@Override public int describeContents() {",
        "return 0;",
        "}",
        "@Override public void writeToParcel(Parcel dest, int flags) {",
        "LinkedList<Child> component1 = data.component1();",
        "int component1Size = component1.size();",
        "dest.writeInt(component1Size);",
        "for (int component1Index = 0; component1Index < component1Size; component1Index++) {",
        "Child component1Item = component1.get(component1Index);",
        "if (component1Item == null) {",
        "dest.writeInt(1);",
        "} else {",
        "dest.writeInt(0);",
        "ChildParcel component1ParamParcel = ChildParcel.wrap(component1Item);",
        "component1ParamParcel.writeToParcel(dest, 0);",
        "}",
        "}",
        "}",
        "}"
    ));

    assertAbout(javaSources()).that(asList(source, dataClassChild))
        .processedWith(new KraftPaperProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(expectedSource);
  }
}
