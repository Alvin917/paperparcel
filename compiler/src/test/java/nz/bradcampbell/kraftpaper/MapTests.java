package nz.bradcampbell.kraftpaper;

import com.google.common.base.Joiner;
import com.google.testing.compile.JavaFileObjects;
import org.junit.Test;

import javax.tools.JavaFileObject;

import static com.google.common.truth.Truth.assertAbout;
import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
import static java.util.Arrays.asList;

public class MapTests {

  @Test public void nullableMapOfParcelableTypesTest() throws Exception {
    JavaFileObject dataClass = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
        "package test;",
        "import org.jetbrains.annotations.Nullable;",
        "import nz.bradcampbell.kraftpaper.KraftPaper;",
        "import java.util.Map;",
        "@KraftPaper",
        "public final class Test {",
        "@Nullable private final Map<Integer, Integer> child;",
        "public Test(@Nullable Map<Integer, Integer> child) {",
        "this.child = child;",
        "}",
        "@Nullable public Map<Integer, Integer> component1() {",
        "return this.child;",
        "}",
        "}"
    ));

    JavaFileObject testParcel = JavaFileObjects.forSourceString("test/TestParcel", Joiner.on('\n').join(
        "package test;",
        "import android.os.Parcel;",
        "import android.os.Parcelable;",
        "import java.lang.Integer;",
        "import java.lang.Override;",
        "import java.util.HashMap;",
        "import java.util.Map;",
        "public class TestParcel implements Parcelable {",
        "public static final Parcelable.Creator<TestParcel> CREATOR = new Parcelable.Creator<TestParcel>() {",
        "@Override public TestParcel createFromParcel(Parcel in) {",
        "return new TestParcel(in);",
        "}",
        "@Override public TestParcel[] newArray(int size) {",
        "return new TestParcel[size];",
        "}",
        "};",
        "private final Test data;",
        "private TestParcel(Test data) {",
        "this.data = data;",
        "}",
        "private TestParcel(Parcel in) {",
        "Map<Integer, Integer> outComponent1 = null;",
        "if (in.readInt() == 0) {",
        "int component1Size = in.readInt();",
        "Map<Integer, Integer> component1 = new HashMap<Integer, Integer>(component1Size);",
        "for (int component1Index = 0; component1Index < component1Size; component1Index++) {",
        "Integer component1Key = (Integer) in.readValue(null);",
        "Integer component1Value = (Integer) in.readValue(null);",
        "component1.put(component1Key, component1Value);",
        "}",
        "outComponent1 = component1;",
        "}",
        "this.data = new Test(outComponent1);",
        "}",
        "public static final TestParcel wrap(Test data) {",
        "return new TestParcel(data);",
        "}",
        "public Test getContents() {",
        "return data;",
        "}",
        "@Override public int describeContents() {",
        "return 0;",
        "}",
        "@Override public void writeToParcel(Parcel dest, int flags) {",
        "Map<Integer, Integer> component1 = data.component1();",
        "if (component1 == null) {",
        "dest.writeInt(1);",
        "} else {",
        "dest.writeInt(0);",
        "dest.writeInt(component1.size());",
        "for (Map.Entry<Integer, Integer> component1Entry : component1.entrySet()) {",
        "dest.writeValue(component1Entry.getKey());",
        "dest.writeValue(component1Entry.getValue());",
        "}",
        "}",
        "}",
        "}"
    ));

    assertAbout(javaSource()).that(dataClass)
        .processedWith(new KraftPaperProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(testParcel);
  }

  @Test public void mapOfParcelableTypesTest() throws Exception {
    JavaFileObject dataClass = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
        "package test;",
        "import nz.bradcampbell.kraftpaper.KraftPaper;",
        "import java.util.Map;",
        "@KraftPaper",
        "public final class Test {",
        "private final Map<Integer, Integer> child;",
        "public Test(Map<Integer, Integer> child) {",
        "this.child = child;",
        "}",
        "public Map<Integer, Integer> component1() {",
        "return this.child;",
        "}",
        "}"
    ));

    JavaFileObject testParcel = JavaFileObjects.forSourceString("test/TestParcel", Joiner.on('\n').join(
        "package test;",
        "import android.os.Parcel;",
        "import android.os.Parcelable;",
        "import java.lang.Integer;",
        "import java.lang.Override;",
        "import java.util.HashMap;",
        "import java.util.Map;",
        "public class TestParcel implements Parcelable {",
        "public static final Parcelable.Creator<TestParcel> CREATOR = new Parcelable.Creator<TestParcel>() {",
        "@Override public TestParcel createFromParcel(Parcel in) {",
        "return new TestParcel(in);",
        "}",
        "@Override public TestParcel[] newArray(int size) {",
        "return new TestParcel[size];",
        "}",
        "};",
        "private final Test data;",
        "private TestParcel(Test data) {",
        "this.data = data;",
        "}",
        "private TestParcel(Parcel in) {",
        "int component1Size = in.readInt();",
        "Map<Integer, Integer> component1 = new HashMap<Integer, Integer>(component1Size);",
        "for (int component1Index = 0; component1Index < component1Size; component1Index++) {",
        "Integer component1Key = (Integer) in.readValue(null);",
        "Integer component1Value = (Integer) in.readValue(null);",
        "component1.put(component1Key, component1Value);",
        "}",
        "this.data = new Test(component1);",
        "}",
        "public static final TestParcel wrap(Test data) {",
        "return new TestParcel(data);",
        "}",
        "public Test getContents() {",
        "return data;",
        "}",
        "@Override public int describeContents() {",
        "return 0;",
        "}",
        "@Override public void writeToParcel(Parcel dest, int flags) {",
        "Map<Integer, Integer> component1 = data.component1();",
        "dest.writeInt(component1.size());",
        "for (Map.Entry<Integer, Integer> component1Entry : component1.entrySet()) {",
        "dest.writeValue(component1Entry.getKey());",
        "dest.writeValue(component1Entry.getValue());",
        "}",
        "}",
        "}"
    ));

    assertAbout(javaSource()).that(dataClass)
        .processedWith(new KraftPaperProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(testParcel);
  }

  @Test public void mapWithDataTypeAsKeyTest() throws Exception {
    JavaFileObject dataClassRoot = JavaFileObjects.forSourceString("test.Root", Joiner.on('\n').join(
        "package test;",
        "import nz.bradcampbell.kraftpaper.KraftPaper;",
        "import java.util.Map;",
        "@KraftPaper",
        "public final class Root {",
        "private final Map<Child, Integer> child;",
        "public Root(Map<Child, Integer> child) {",
        "this.child = child;",
        "}",
        "public Map<Child, Integer> component1() {",
        "return this.child;",
        "}",
        "}"
    ));

    JavaFileObject dataClassChild = JavaFileObjects.forSourceString("test.Child", Joiner.on('\n').join(
        "package test;",
        "public final class Child {",
        "private final Integer test;",
        "public Child(Integer test) {",
        "this.test = test;",
        "}",
        "public Integer component1() {",
        "return this.test;",
        "}",
        "}"
    ));

    JavaFileObject rootParcel = JavaFileObjects.forSourceString("test/RootParcel", Joiner.on('\n').join(
        "package test;",
        "import android.os.Parcel;",
        "import android.os.Parcelable;",
        "import java.lang.Integer;",
        "import java.lang.Override;",
        "import java.util.HashMap;",
        "import java.util.Map;",
        "public class RootParcel implements Parcelable {",
        "public static final Parcelable.Creator<RootParcel> CREATOR = new Parcelable.Creator<RootParcel>() {",
        "@Override public RootParcel createFromParcel(Parcel in) {",
        "return new RootParcel(in);",
        "}",
        "@Override public RootParcel[] newArray(int size) {",
        "return new RootParcel[size];",
        "}",
        "};",
        "private final Root data;",
        "private RootParcel(Root data) {",
        "this.data = data;",
        "}",
        "private RootParcel(Parcel in) {",
        "int component1Size = in.readInt();",
        "Map<Child, Integer> component1 = new HashMap<Child, Integer>(component1Size);",
        "for (int component1Index = 0; component1Index < component1Size; component1Index++) {",
        "Child outComponent1Key = null;",
        "if (in.readInt() == 0) {",
        "ChildParcel component1KeyParcel = ChildParcel.CREATOR.createFromParcel(in);",
        "outComponent1Key = component1KeyParcel.getContents();",
        "}",
        "Integer component1Value = (Integer) in.readValue(null);",
        "component1.put(outComponent1Key, component1Value);",
        "}",
        "this.data = new Root(component1);",
        "}",
        "public static final RootParcel wrap(Root data) {",
        "return new RootParcel(data);",
        "}",
        "public Root getContents() {",
        "return data;",
        "}",
        "@Override public int describeContents() {",
        "return 0;",
        "}",
        "@Override public void writeToParcel(Parcel dest, int flags) {",
        "Map<Child, Integer> component1 = data.component1();",
        "dest.writeInt(component1.size());",
        "for (Map.Entry<Child, Integer> component1Entry : component1.entrySet()) {",
        "if (component1Entry.getKey() == null) {",
        "dest.writeInt(1);",
        "} else {",
        "dest.writeInt(0);",
        "ChildParcel component1KeyParcel = ChildParcel.wrap(component1Entry.getKey());",
        "component1KeyParcel.writeToParcel(dest, 0);",
        "}",
        "dest.writeValue(component1Entry.getValue());",
        "}",
        "}",
        "}"
    ));

    JavaFileObject childParcel = JavaFileObjects.forSourceString("test/ChildParcel", Joiner.on('\n').join(
        "package test;",
        "import android.os.Parcel;",
        "import android.os.Parcelable;",
        "import java.lang.Integer;",
        "import java.lang.Override;",
        "public class ChildParcel implements Parcelable {",
        "public static final Parcelable.Creator<ChildParcel> CREATOR = new Parcelable.Creator<ChildParcel>() {",
        "@Override public ChildParcel createFromParcel(Parcel in) {",
        "return new ChildParcel(in);",
        "}",
        "@Override public ChildParcel[] newArray(int size) {",
        "return new ChildParcel[size];",
        "}",
        "};",
        "private final Child data;",
        "private ChildParcel(Child data) {",
        "this.data = data;",
        "}",
        "private ChildParcel(Parcel in) {",
        "Integer component1 = (Integer) in.readValue(null);",
        "this.data = new Child(component1);",
        "}",
        "public static final ChildParcel wrap(Child data) {",
        "return new ChildParcel(data);",
        "}",
        "public Child getContents() {",
        "return data;",
        "}",
        "@Override public int describeContents() {",
        "return 0;",
        "}",
        "@Override public void writeToParcel(Parcel dest, int flags) {",
        "Integer component1 = data.component1();",
        "dest.writeValue(component1);",
        "}",
        "}"
    ));

    assertAbout(javaSources()).that(asList(dataClassRoot, dataClassChild))
        .processedWith(new KraftPaperProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(rootParcel, childParcel);
  }

  @Test public void mapWithDataTypeAsValueTest() throws Exception {
    JavaFileObject dataClassRoot = JavaFileObjects.forSourceString("test.Root", Joiner.on('\n').join(
        "package test;",
        "import nz.bradcampbell.kraftpaper.KraftPaper;",
        "import java.util.Map;",
        "@KraftPaper",
        "public final class Root {",
        "private final Map<Integer, Child> child;",
        "public Root(Map<Integer, Child> child) {",
        "this.child = child;",
        "}",
        "public Map<Integer, Child> component1() {",
        "return this.child;",
        "}",
        "}"
    ));

    JavaFileObject dataClassChild = JavaFileObjects.forSourceString("test.Child", Joiner.on('\n').join(
        "package test;",
        "public final class Child {",
        "private final Integer test;",
        "public Child(Integer test) {",
        "this.test = test;",
        "}",
        "public Integer component1() {",
        "return this.test;",
        "}",
        "}"
    ));

    JavaFileObject rootParcel = JavaFileObjects.forSourceString("test/RootParcel", Joiner.on('\n').join(
        "package test;",
        "import android.os.Parcel;",
        "import android.os.Parcelable;",
        "import java.lang.Integer;",
        "import java.lang.Override;",
        "import java.util.HashMap;",
        "import java.util.Map;",
        "public class RootParcel implements Parcelable {",
        "public static final Parcelable.Creator<RootParcel> CREATOR = new Parcelable.Creator<RootParcel>() {",
        "@Override public RootParcel createFromParcel(Parcel in) {",
        "return new RootParcel(in);",
        "}",
        "@Override public RootParcel[] newArray(int size) {",
        "return new RootParcel[size];",
        "}",
        "};",
        "private final Root data;",
        "private RootParcel(Root data) {",
        "this.data = data;",
        "}",
        "private RootParcel(Parcel in) {",
        "int component1Size = in.readInt();",
        "Map<Integer, Child> component1 = new HashMap<Integer, Child>(component1Size);",
        "for (int component1Index = 0; component1Index < component1Size; component1Index++) {",
        "Integer component1Key = (Integer) in.readValue(null);",
        "Child outComponent1Value = null;",
        "if (in.readInt() == 0) {",
        "ChildParcel component1ValueParcel = ChildParcel.CREATOR.createFromParcel(in);",
        "outComponent1Value = component1ValueParcel.getContents();",
        "}",
        "component1.put(component1Key, outComponent1Value);",
        "}",
        "this.data = new Root(component1);",
        "}",
        "public static final RootParcel wrap(Root data) {",
        "return new RootParcel(data);",
        "}",
        "public Root getContents() {",
        "return data;",
        "}",
        "@Override public int describeContents() {",
        "return 0;",
        "}",
        "@Override public void writeToParcel(Parcel dest, int flags) {",
        "Map<Integer, Child> component1 = data.component1();",
        "dest.writeInt(component1.size());",
        "for (Map.Entry<Integer, Child> component1Entry : component1.entrySet()) {",
        "dest.writeValue(component1Entry.getKey());",
        "if (component1Entry.getValue() == null) {",
        "dest.writeInt(1);",
        "} else {",
        "dest.writeInt(0);",
        "ChildParcel component1ValueParcel = ChildParcel.wrap(component1Entry.getValue());",
        "component1ValueParcel.writeToParcel(dest, 0);",
        "}",
        "}",
        "}",
        "}"
    ));

    JavaFileObject childParcel = JavaFileObjects.forSourceString("test/ChildParcel", Joiner.on('\n').join(
        "package test;",
        "import android.os.Parcel;",
        "import android.os.Parcelable;",
        "import java.lang.Integer;",
        "import java.lang.Override;",
        "public class ChildParcel implements Parcelable {",
        "public static final Parcelable.Creator<ChildParcel> CREATOR = new Parcelable.Creator<ChildParcel>() {",
        "@Override public ChildParcel createFromParcel(Parcel in) {",
        "return new ChildParcel(in);",
        "}",
        "@Override public ChildParcel[] newArray(int size) {",
        "return new ChildParcel[size];",
        "}",
        "};",
        "private final Child data;",
        "private ChildParcel(Child data) {",
        "this.data = data;",
        "}",
        "private ChildParcel(Parcel in) {",
        "Integer component1 = (Integer) in.readValue(null);",
        "this.data = new Child(component1);",
        "}",
        "public static final ChildParcel wrap(Child data) {",
        "return new ChildParcel(data);",
        "}",
        "public Child getContents() {",
        "return data;",
        "}",
        "@Override public int describeContents() {",
        "return 0;",
        "}",
        "@Override public void writeToParcel(Parcel dest, int flags) {",
        "Integer component1 = data.component1();",
        "dest.writeValue(component1);",
        "}",
        "}"
    ));

    assertAbout(javaSources()).that(asList(dataClassRoot, dataClassChild))
        .processedWith(new KraftPaperProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(rootParcel, childParcel);
  }

  @Test public void mapWithDataTypeAsKeyAndValueTest() throws Exception {
    JavaFileObject dataClassRoot = JavaFileObjects.forSourceString("test.Root", Joiner.on('\n').join(
        "package test;",
        "import nz.bradcampbell.kraftpaper.KraftPaper;",
        "import java.util.Map;",
        "@KraftPaper",
        "public final class Root {",
        "private final Map<Child, Child> child;",
        "public Root(Map<Child, Child> child) {",
        "this.child = child;",
        "}",
        "public Map<Child, Child> component1() {",
        "return this.child;",
        "}",
        "}"
    ));

    JavaFileObject dataClassChild = JavaFileObjects.forSourceString("test.Child", Joiner.on('\n').join(
        "package test;",
        "public final class Child {",
        "private final Integer test;",
        "public Child(Integer test) {",
        "this.test = test;",
        "}",
        "public Integer component1() {",
        "return this.test;",
        "}",
        "}"
    ));

    JavaFileObject rootParcel = JavaFileObjects.forSourceString("test/RootParcel", Joiner.on('\n').join(
        "package test;",
        "import android.os.Parcel;",
        "import android.os.Parcelable;",
        "import java.lang.Override;",
        "import java.util.HashMap;",
        "import java.util.Map;",
        "public class RootParcel implements Parcelable {",
        "public static final Parcelable.Creator<RootParcel> CREATOR = new Parcelable.Creator<RootParcel>() {",
        "@Override public RootParcel createFromParcel(Parcel in) {",
        "return new RootParcel(in);",
        "}",
        "@Override public RootParcel[] newArray(int size) {",
        "return new RootParcel[size];",
        "}",
        "};",
        "private final Root data;",
        "private RootParcel(Root data) {",
        "this.data = data;",
        "}",
        "private RootParcel(Parcel in) {",
        "int component1Size = in.readInt();",
        "Map<Child, Child> component1 = new HashMap<Child, Child>(component1Size);",
        "for (int component1Index = 0; component1Index < component1Size; component1Index++) {",
        "Child outComponent1Key = null;",
        "if (in.readInt() == 0) {",
        "ChildParcel component1KeyParcel = ChildParcel.CREATOR.createFromParcel(in);",
        "outComponent1Key = component1KeyParcel.getContents();",
        "}",
        "Child outComponent1Value = null;",
        "if (in.readInt() == 0) {",
        "ChildParcel component1ValueParcel = ChildParcel.CREATOR.createFromParcel(in);",
        "outComponent1Value = component1ValueParcel.getContents();",
        "}",
        "component1.put(outComponent1Key, outComponent1Value);",
        "}",
        "this.data = new Root(component1);",
        "}",
        "public static final RootParcel wrap(Root data) {",
        "return new RootParcel(data);",
        "}",
        "public Root getContents() {",
        "return data;",
        "}",
        "@Override public int describeContents() {",
        "return 0;",
        "}",
        "@Override public void writeToParcel(Parcel dest, int flags) {",
        "Map<Child, Child> component1 = data.component1();",
        "dest.writeInt(component1.size());",
        "for (Map.Entry<Child, Child> component1Entry : component1.entrySet()) {",
        "if (component1Entry.getKey() == null) {",
        "dest.writeInt(1);",
        "} else {",
        "dest.writeInt(0);",
        "ChildParcel component1KeyParcel = ChildParcel.wrap(component1Entry.getKey());",
        "component1KeyParcel.writeToParcel(dest, 0);",
        "}",
        "if (component1Entry.getValue() == null) {",
        "dest.writeInt(1);",
        "} else {",
        "dest.writeInt(0);",
        "ChildParcel component1ValueParcel = ChildParcel.wrap(component1Entry.getValue());",
        "component1ValueParcel.writeToParcel(dest, 0);",
        "}",
        "}",
        "}",
        "}"
    ));

    JavaFileObject childParcel = JavaFileObjects.forSourceString("test/ChildParcel", Joiner.on('\n').join(
        "package test;",
        "import android.os.Parcel;",
        "import android.os.Parcelable;",
        "import java.lang.Integer;",
        "import java.lang.Override;",
        "public class ChildParcel implements Parcelable {",
        "public static final Parcelable.Creator<ChildParcel> CREATOR = new Parcelable.Creator<ChildParcel>() {",
        "@Override public ChildParcel createFromParcel(Parcel in) {",
        "return new ChildParcel(in);",
        "}",
        "@Override public ChildParcel[] newArray(int size) {",
        "return new ChildParcel[size];",
        "}",
        "};",
        "private final Child data;",
        "private ChildParcel(Child data) {",
        "this.data = data;",
        "}",
        "private ChildParcel(Parcel in) {",
        "Integer component1 = (Integer) in.readValue(null);",
        "this.data = new Child(component1);",
        "}",
        "public static final ChildParcel wrap(Child data) {",
        "return new ChildParcel(data);",
        "}",
        "public Child getContents() {",
        "return data;",
        "}",
        "@Override public int describeContents() {",
        "return 0;",
        "}",
        "@Override public void writeToParcel(Parcel dest, int flags) {",
        "Integer component1 = data.component1();",
        "dest.writeValue(component1);",
        "}",
        "}"
    ));

    assertAbout(javaSources()).that(asList(dataClassRoot, dataClassChild))
        .processedWith(new KraftPaperProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(rootParcel, childParcel);
  }

  @Test public void mapWithParcelableListAsValueTest() throws Exception {
    JavaFileObject dataClassRoot = JavaFileObjects.forSourceString("test.Root", Joiner.on('\n').join(
        "package test;",
        "import nz.bradcampbell.kraftpaper.KraftPaper;",
        "import java.lang.Integer;",
        "import java.util.Map;",
        "import java.util.List;",
        "@KraftPaper",
        "public final class Root {",
        "private final Map<Integer, List<Integer>> child;",
        "public Root(Map<Integer, List<Integer>> child) {",
        "this.child = child;",
        "}",
        "public Map<Integer, List<Integer>> component1() {",
        "return this.child;",
        "}",
        "}"
    ));

    JavaFileObject rootParcel = JavaFileObjects.forSourceString("test/RootParcel", Joiner.on('\n').join(
        "package test;",
        "import android.os.Parcel;",
        "import android.os.Parcelable;",
        "import java.lang.Integer;",
        "import java.lang.Override;",
        "import java.util.ArrayList;",
        "import java.util.HashMap;",
        "import java.util.List;",
        "import java.util.Map;",
        "public class RootParcel implements Parcelable {",
        "public static final Parcelable.Creator<RootParcel> CREATOR = new Parcelable.Creator<RootParcel>() {",
        "@Override public RootParcel createFromParcel(Parcel in) {",
        "return new RootParcel(in);",
        "}",
        "@Override public RootParcel[] newArray(int size) {",
        "return new RootParcel[size];",
        "}",
        "};",
        "private final Root data;",
        "private RootParcel(Root data) {",
        "this.data = data;",
        "}",
        "private RootParcel(Parcel in) {",
        "int component1Size = in.readInt();",
        "Map<Integer, List<Integer>> component1 = new HashMap<Integer, List<Integer>>(component1Size);",
        "for (int component1Index = 0; component1Index < component1Size; component1Index++) {",
        "Integer component1Key = (Integer) in.readValue(null);",
        "List<Integer> outComponent1Value = null;",
        "if (in.readInt() == 0) {",
        "int component1ValueSize = in.readInt();",
        "List<Integer> component1Value = new ArrayList<Integer>(component1ValueSize);",
        "for (int component1ValueIndex = 0; component1ValueIndex < component1ValueSize; component1ValueIndex++) {",
        "Integer component1ValueItem = (Integer) in.readValue(null);",
        "component1Value.add(component1ValueItem);",
        "}",
        "outComponent1Value = component1Value;",
        "}",
        "component1.put(component1Key, outComponent1Value);",
        "}",
        "this.data = new Root(component1);",
        "}",
        "public static final RootParcel wrap(Root data) {",
        "return new RootParcel(data);",
        "}",
        "public Root getContents() {",
        "return data;",
        "}",
        "@Override public int describeContents() {",
        "return 0;",
        "}",
        "@Override public void writeToParcel(Parcel dest, int flags) {",
        "Map<Integer, List<Integer>> component1 = data.component1();",
        "dest.writeInt(component1.size());",
        "for (Map.Entry<Integer, List<Integer>> component1Entry : component1.entrySet()) {",
        "dest.writeValue(component1Entry.getKey());",
        "if (component1Entry.getValue() == null) {",
        "dest.writeInt(1);",
        "} else {",
        "dest.writeInt(0);",
        "int component1ValueSize = component1Entry.getValue().size();",
        "dest.writeInt(component1ValueSize);",
        "for (int component1ValueIndex = 0; component1ValueIndex < component1ValueSize; component1ValueIndex++) {",
        "Integer component1ValueItem = component1Entry.getValue().get(component1ValueIndex);",
        "dest.writeValue(component1ValueItem);",
        "}",
        "}",
        "}",
        "}",
        "}"
    ));

    assertAbout(javaSource()).that(dataClassRoot)
        .processedWith(new KraftPaperProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(rootParcel);
  }

  @Test public void mapWithNonParcelableListAsValueTest() throws Exception {
    JavaFileObject dataClassRoot = JavaFileObjects.forSourceString("test.Root", Joiner.on('\n').join(
        "package test;",
        "import nz.bradcampbell.kraftpaper.KraftPaper;",
        "import java.util.Map;",
        "import java.util.List;",
        "@KraftPaper",
        "public final class Root {",
        "private final Map<Integer, List<Child>> child;",
        "public Root(Map<Integer, List<Child>> child) {",
        "this.child = child;",
        "}",
        "public Map<Integer, List<Child>> component1() {",
        "return this.child;",
        "}",
        "}"
    ));

    JavaFileObject dataClassChild = JavaFileObjects.forSourceString("test.Child", Joiner.on('\n').join(
        "package test;",
        "public final class Child {",
        "private final Integer test;",
        "public Child(Integer test) {",
        "this.test = test;",
        "}",
        "public Integer component1() {",
        "return this.test;",
        "}",
        "}"
    ));

    JavaFileObject rootParcel = JavaFileObjects.forSourceString("test/RootParcel", Joiner.on('\n').join(
        "package test;",
        "import android.os.Parcel;",
        "import android.os.Parcelable;",
        "import java.lang.Integer;",
        "import java.lang.Override;",
        "import java.util.ArrayList;",
        "import java.util.HashMap;",
        "import java.util.List;",
        "import java.util.Map;",
        "public class RootParcel implements Parcelable {",
        "public static final Parcelable.Creator<RootParcel> CREATOR = new Parcelable.Creator<RootParcel>() {",
        "@Override public RootParcel createFromParcel(Parcel in) {",
        "return new RootParcel(in);",
        "}",
        "@Override public RootParcel[] newArray(int size) {",
        "return new RootParcel[size];",
        "}",
        "};",
        "private final Root data;",
        "private RootParcel(Root data) {",
        "this.data = data;",
        "}",
        "private RootParcel(Parcel in) {",
        "int component1Size = in.readInt();",
        "Map<Integer, List<Child>> component1 = new HashMap<Integer, List<Child>>(component1Size);",
        "for (int component1Index = 0; component1Index < component1Size; component1Index++) {",
        "Integer component1Key = (Integer) in.readValue(null);",
        "List<Child> outComponent1Value = null;",
        "if (in.readInt() == 0) {",
        "int component1ValueSize = in.readInt();",
        "List<Child> component1Value = new ArrayList<Child>(component1ValueSize);",
        "for (int component1ValueIndex = 0; component1ValueIndex < component1ValueSize; component1ValueIndex++) {",
        "Child outComponent1ValueItem = null;",
        "if (in.readInt() == 0) {",
        "ChildParcel component1ValueItemParcel = ChildParcel.CREATOR.createFromParcel(in);",
        "outComponent1ValueItem = component1ValueItemParcel.getContents();",
        "}",
        "component1Value.add(outComponent1ValueItem);",
        "}",
        "outComponent1Value = component1Value;",
        "}",
        "component1.put(component1Key, outComponent1Value);",
        "}",
        "this.data = new Root(component1);",
        "}",
        "public static final RootParcel wrap(Root data) {",
        "return new RootParcel(data);",
        "}",
        "public Root getContents() {",
        "return data;",
        "}",
        "@Override public int describeContents() {",
        "return 0;",
        "}",
        "@Override public void writeToParcel(Parcel dest, int flags) {",
        "Map<Integer, List<Child>> component1 = data.component1();",
        "dest.writeInt(component1.size());",
        "for (Map.Entry<Integer, List<Child>> component1Entry : component1.entrySet()) {",
        "dest.writeValue(component1Entry.getKey());",
        "if (component1Entry.getValue() == null) {",
        "dest.writeInt(1);",
        "} else {",
        "dest.writeInt(0);",
        "int component1ValueSize = component1Entry.getValue().size();",
        "dest.writeInt(component1ValueSize);",
        "for (int component1ValueIndex = 0; component1ValueIndex < component1ValueSize; component1ValueIndex++) {",
        "Child component1ValueItem = component1Entry.getValue().get(component1ValueIndex);",
        "if (component1ValueItem == null) {",
        "dest.writeInt(1);",
        "} else {",
        "dest.writeInt(0);",
        "ChildParcel component1ValueParamParcel = ChildParcel.wrap(component1ValueItem);",
        "component1ValueParamParcel.writeToParcel(dest, 0);",
        "}",
        "}",
        "}",
        "}",
        "}",
        "}"
    ));

    JavaFileObject childParcel = JavaFileObjects.forSourceString("test/ChildParcel", Joiner.on('\n').join(
        "package test;",
        "import android.os.Parcel;",
        "import android.os.Parcelable;",
        "import java.lang.Integer;",
        "import java.lang.Override;",
        "public class ChildParcel implements Parcelable {",
        "public static final Parcelable.Creator<ChildParcel> CREATOR = new Parcelable.Creator<ChildParcel>() {",
        "@Override public ChildParcel createFromParcel(Parcel in) {",
        "return new ChildParcel(in);",
        "}",
        "@Override public ChildParcel[] newArray(int size) {",
        "return new ChildParcel[size];",
        "}",
        "};",
        "private final Child data;",
        "private ChildParcel(Child data) {",
        "this.data = data;",
        "}",
        "private ChildParcel(Parcel in) {",
        "Integer component1 = (Integer) in.readValue(null);",
        "this.data = new Child(component1);",
        "}",
        "public static final ChildParcel wrap(Child data) {",
        "return new ChildParcel(data);",
        "}",
        "public Child getContents() {",
        "return data;",
        "}",
        "@Override public int describeContents() {",
        "return 0;",
        "}",
        "@Override public void writeToParcel(Parcel dest, int flags) {",
        "Integer component1 = data.component1();",
        "dest.writeValue(component1);",
        "}",
        "}"
    ));

    assertAbout(javaSources()).that(asList(dataClassRoot, dataClassChild))
        .processedWith(new KraftPaperProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(rootParcel, childParcel);
  }

  @Test public void mapWithParcelableListAsKeyAndNonParcelableListAsValueTest() throws Exception {
    JavaFileObject dataClassRoot = JavaFileObjects.forSourceString("test.Root", Joiner.on('\n').join(
        "package test;",
        "import nz.bradcampbell.kraftpaper.KraftPaper;",
        "import java.util.Map;",
        "import java.util.List;",
        "@KraftPaper",
        "public final class Root {",
        "private final Map<List<Integer>, List<Child>> child;",
        "public Root(Map<List<Integer>, List<Child>> child) {",
        "this.child = child;",
        "}",
        "public Map<List<Integer>, List<Child>> component1() {",
        "return this.child;",
        "}",
        "}"
    ));

    JavaFileObject dataClassChild = JavaFileObjects.forSourceString("test.Child", Joiner.on('\n').join(
        "package test;",
        "public final class Child {",
        "private final Integer test;",
        "public Child(Integer test) {",
        "this.test = test;",
        "}",
        "public Integer component1() {",
        "return this.test;",
        "}",
        "}"
    ));

    JavaFileObject rootParcel = JavaFileObjects.forSourceString("test/RootParcel", Joiner.on('\n').join(
        "package test;",
        "import android.os.Parcel;",
        "import android.os.Parcelable;",
        "import java.lang.Integer;",
        "import java.lang.Override;",
        "import java.util.ArrayList;",
        "import java.util.HashMap;",
        "import java.util.List;",
        "import java.util.Map;",
        "public class RootParcel implements Parcelable {",
        "public static final Parcelable.Creator<RootParcel> CREATOR = new Parcelable.Creator<RootParcel>() {",
        "@Override public RootParcel createFromParcel(Parcel in) {",
        "return new RootParcel(in);",
        "}",
        "@Override public RootParcel[] newArray(int size) {",
        "return new RootParcel[size];",
        "}",
        "};",
        "private final Root data;",
        "private RootParcel(Root data) {",
        "this.data = data;",
        "}",
        "private RootParcel(Parcel in) {",
        "int component1Size = in.readInt();",
        "Map<List<Integer>, List<Child>> component1 = new HashMap<List<Integer>, List<Child>>(component1Size);",
        "for (int component1Index = 0; component1Index < component1Size; component1Index++) {",
        "List<Integer> outComponent1Key = null;",
        "if (in.readInt() == 0) {",
        "int component1KeySize = in.readInt();",
        "List<Integer> component1Key = new ArrayList<Integer>(component1KeySize);",
        "for (int component1KeyIndex = 0; component1KeyIndex < component1KeySize; component1KeyIndex++) {",
        "Integer component1KeyItem = (Integer) in.readValue(null);",
        "component1Key.add(component1KeyItem);",
        "}",
        "outComponent1Key = component1Key;",
        "}",
        "List<Child> outComponent1Value = null;",
        "if (in.readInt() == 0) {",
        "int component1ValueSize = in.readInt();",
        "List<Child> component1Value = new ArrayList<Child>(component1ValueSize);",
        "for (int component1ValueIndex = 0; component1ValueIndex < component1ValueSize; component1ValueIndex++) {",
        "Child outComponent1ValueItem = null;",
        "if (in.readInt() == 0) {",
        "ChildParcel component1ValueItemParcel = ChildParcel.CREATOR.createFromParcel(in);",
        "outComponent1ValueItem = component1ValueItemParcel.getContents();",
        "}",
        "component1Value.add(outComponent1ValueItem);",
        "}",
        "outComponent1Value = component1Value;",
        "}",
        "component1.put(outComponent1Key, outComponent1Value);",
        "}",
        "this.data = new Root(component1);",
        "}",
        "public static final RootParcel wrap(Root data) {",
        "return new RootParcel(data);",
        "}",
        "public Root getContents() {",
        "return data;",
        "}",
        "@Override public int describeContents() {",
        "return 0;",
        "}",
        "@Override public void writeToParcel(Parcel dest, int flags) {",
        "Map<List<Integer>, List<Child>> component1 = data.component1();",
        "dest.writeInt(component1.size());",
        "for (Map.Entry<List<Integer>, List<Child>> component1Entry : component1.entrySet()) {",
        "if (component1Entry.getKey() == null) {",
        "dest.writeInt(1);",
        "} else {",
        "dest.writeInt(0);",
        "int component1KeySize = component1Entry.getKey().size();",
        "dest.writeInt(component1KeySize);",
        "for (int component1KeyIndex = 0; component1KeyIndex < component1KeySize; component1KeyIndex++) {",
        "Integer component1KeyItem = component1Entry.getKey().get(component1KeyIndex);",
        "dest.writeValue(component1KeyItem);",
        "}",
        "}",
        "if (component1Entry.getValue() == null) {",
        "dest.writeInt(1);",
        "} else {",
        "dest.writeInt(0);",
        "int component1ValueSize = component1Entry.getValue().size();",
        "dest.writeInt(component1ValueSize);",
        "for (int component1ValueIndex = 0; component1ValueIndex < component1ValueSize; component1ValueIndex++) {",
        "Child component1ValueItem = component1Entry.getValue().get(component1ValueIndex);",
        "if (component1ValueItem == null) {",
        "dest.writeInt(1);",
        "} else {",
        "dest.writeInt(0);",
        "ChildParcel component1ValueParamParcel = ChildParcel.wrap(component1ValueItem);",
        "component1ValueParamParcel.writeToParcel(dest, 0);",
        "}",
        "}",
        "}",
        "}",
        "}",
        "}"
    ));

    JavaFileObject childParcel = JavaFileObjects.forSourceString("test/ChildParcel", Joiner.on('\n').join(
        "package test;",
        "import android.os.Parcel;",
        "import android.os.Parcelable;",
        "import java.lang.Integer;",
        "import java.lang.Override;",
        "public class ChildParcel implements Parcelable {",
        "public static final Parcelable.Creator<ChildParcel> CREATOR = new Parcelable.Creator<ChildParcel>() {",
        "@Override public ChildParcel createFromParcel(Parcel in) {",
        "return new ChildParcel(in);",
        "}",
        "@Override public ChildParcel[] newArray(int size) {",
        "return new ChildParcel[size];",
        "}",
        "};",
        "private final Child data;",
        "private ChildParcel(Child data) {",
        "this.data = data;",
        "}",
        "private ChildParcel(Parcel in) {",
        "Integer component1 = (Integer) in.readValue(null);",
        "this.data = new Child(component1);",
        "}",
        "public static final ChildParcel wrap(Child data) {",
        "return new ChildParcel(data);",
        "}",
        "public Child getContents() {",
        "return data;",
        "}",
        "@Override public int describeContents() {",
        "return 0;",
        "}",
        "@Override public void writeToParcel(Parcel dest, int flags) {",
        "Integer component1 = data.component1();",
        "dest.writeValue(component1);",
        "}",
        "}"
    ));

    assertAbout(javaSources()).that(asList(dataClassRoot, dataClassChild))
        .processedWith(new KraftPaperProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(rootParcel, childParcel);
  }

  @Test public void treeMapOfParcelableTypesTest() throws Exception {
    JavaFileObject dataClass = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
        "package test;",
        "import nz.bradcampbell.kraftpaper.KraftPaper;",
        "import java.util.TreeMap;",
        "@KraftPaper",
        "public final class Test {",
        "private final TreeMap<Integer, Integer> child;",
        "public Test(TreeMap<Integer, Integer> child) {",
        "this.child = child;",
        "}",
        "public TreeMap<Integer, Integer> component1() {",
        "return this.child;",
        "}",
        "}"
    ));

    JavaFileObject testParcel = JavaFileObjects.forSourceString("test/TestParcel", Joiner.on('\n').join(
        "package test;",
        "import android.os.Parcel;",
        "import android.os.Parcelable;",
        "import java.lang.Integer;",
        "import java.lang.Override;",
        "import java.util.Map;",
        "import java.util.TreeMap;",
        "public class TestParcel implements Parcelable {",
        "public static final Parcelable.Creator<TestParcel> CREATOR = new Parcelable.Creator<TestParcel>() {",
        "@Override public TestParcel createFromParcel(Parcel in) {",
        "return new TestParcel(in);",
        "}",
        "@Override public TestParcel[] newArray(int size) {",
        "return new TestParcel[size];",
        "}",
        "};",
        "private final Test data;",
        "private TestParcel(Test data) {",
        "this.data = data;",
        "}",
        "private TestParcel(Parcel in) {",
        "int component1Size = in.readInt();",
        "TreeMap<Integer, Integer> component1 = new TreeMap<Integer, Integer>();",
        "for (int component1Index = 0; component1Index < component1Size; component1Index++) {",
        "Integer component1Key = (Integer) in.readValue(null);",
        "Integer component1Value = (Integer) in.readValue(null);",
        "component1.put(component1Key, component1Value);",
        "}",
        "this.data = new Test(component1);",
        "}",
        "public static final TestParcel wrap(Test data) {",
        "return new TestParcel(data);",
        "}",
        "public Test getContents() {",
        "return data;",
        "}",
        "@Override public int describeContents() {",
        "return 0;",
        "}",
        "@Override public void writeToParcel(Parcel dest, int flags) {",
        "TreeMap<Integer, Integer> component1 = data.component1();",
        "dest.writeInt(component1.size());",
        "for (Map.Entry<Integer, Integer> component1Entry : component1.entrySet()) {",
        "dest.writeValue(component1Entry.getKey());",
        "dest.writeValue(component1Entry.getValue());",
        "}",
        "}",
        "}"
    ));

    assertAbout(javaSource()).that(dataClass)
        .processedWith(new KraftPaperProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(testParcel);
  }

  @Test public void treeMapOfNonParcelableValueTypesTest() throws Exception {
    JavaFileObject dataClass = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
        "package test;",
        "import nz.bradcampbell.kraftpaper.KraftPaper;",
        "import java.util.TreeMap;",
        "@KraftPaper",
        "public final class Test {",
        "private final TreeMap<Integer, Child> child;",
        "public Test(TreeMap<Integer, Child> child) {",
        "this.child = child;",
        "}",
        "public TreeMap<Integer, Child> component1() {",
        "return this.child;",
        "}",
        "}"
    ));

    JavaFileObject dataClassChild = JavaFileObjects.forSourceString("test.Child", Joiner.on('\n').join(
        "package test;",
        "public final class Child {",
        "private final Integer test;",
        "public Child(Integer test) {",
        "this.test = test;",
        "}",
        "public Integer component1() {",
        "return this.test;",
        "}",
        "}"
    ));

    JavaFileObject testParcel = JavaFileObjects.forSourceString("test/TestParcel", Joiner.on('\n').join(
        "package test;",
        "import android.os.Parcel;",
        "import android.os.Parcelable;",
        "import java.lang.Integer;",
        "import java.lang.Override;",
        "import java.util.Map;",
        "import java.util.TreeMap;",
        "public class TestParcel implements Parcelable {",
        "public static final Parcelable.Creator<TestParcel> CREATOR = new Parcelable.Creator<TestParcel>() {",
        "@Override public TestParcel createFromParcel(Parcel in) {",
        "return new TestParcel(in);",
        "}",
        "@Override public TestParcel[] newArray(int size) {",
        "return new TestParcel[size];",
        "}",
        "};",
        "private final Test data;",
        "private TestParcel(Test data) {",
        "this.data = data;",
        "}",
        "private TestParcel(Parcel in) {",
        "int component1Size = in.readInt();",
        "TreeMap<Integer, Child> component1 = new TreeMap<Integer, Child>();",
        "for (int component1Index = 0; component1Index < component1Size; component1Index++) {",
        "Integer component1Key = (Integer) in.readValue(null);",
        "Child outComponent1Value = null;",
        "if (in.readInt() == 0) {",
        "ChildParcel component1ValueParcel = ChildParcel.CREATOR.createFromParcel(in);",
        "outComponent1Value = component1ValueParcel.getContents();",
        "}",
        "component1.put(component1Key, outComponent1Value);",
        "}",
        "this.data = new Test(component1);",
        "}",
        "public static final TestParcel wrap(Test data) {",
        "return new TestParcel(data);",
        "}",
        "public Test getContents() {",
        "return data;",
        "}",
        "@Override public int describeContents() {",
        "return 0;",
        "}",
        "@Override public void writeToParcel(Parcel dest, int flags) {",
        "TreeMap<Integer, Child> component1 = data.component1();",
        "dest.writeInt(component1.size());",
        "for (Map.Entry<Integer, Child> component1Entry : component1.entrySet()) {",
        "dest.writeValue(component1Entry.getKey());",
        "if (component1Entry.getValue() == null) {",
        "dest.writeInt(1);",
        "} else {",
        "dest.writeInt(0);",
        "ChildParcel component1ValueParcel = ChildParcel.wrap(component1Entry.getValue());",
        "component1ValueParcel.writeToParcel(dest, 0);",
        "}",
        "}",
        "}",
        "}"
    ));

    assertAbout(javaSources()).that(asList(dataClass, dataClassChild))
        .processedWith(new KraftPaperProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(testParcel);
  }
}
